#!/bin/bash
#set -euf -o pipefail

# Generate Data Manipulation Language (DML) statements for a given
# delimiter-separated value (DSV) file.

# ARG_POSITIONAL_SINGLE([fileUri],[specify the file],[])
# ARG_POSITIONAL_SINGLE([tableName],[specify the table name],[])
# ARG_POSITIONAL_SINGLE([delimiter],[specify the delimiter character],[';'])
# ARG_OPTIONAL_SINGLE([headerLine],[l],[specify the header line],[1])
# ARG_HELP([Generate a Data Manipulation Language (DML) statements for a given delimiter-separated value (DSV) file.])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.2.2 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, know your rights: https://github.com/matejak/argbash

die()
{
	local _ret=$2
	test -n "$_ret" || _ret=1
	test "$_PRINT_HELP" = yes && print_help >&2
	echo "$1" >&2
	exit ${_ret}
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_arg_delimiter=';'
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_headerline="1"

# THE PRINT HELP FUNCION
print_help ()
{
	echo "Generate a Data Manipulation Language (DML) statements for a given delimiter-separated value (DSV) file."
	printf 'Usage: %s [-l|--headerLine <arg>] [-h|--help] <fileUri> <tableName> [<delimiter>]\n' "$0"
	printf "\t%s\n" "<fileUri>: specify the file"
	printf "\t%s\n" "<tableName>: specify the table name"
	printf "\t%s\n" "<delimiter>: specify the delimiter character (default: '"';'"')"
	printf "\t%s\n" "-l,--headerLine: specify the header line (default: '"1"')"
	printf "\t%s\n" "-h,--help: Prints help"
}

# THE PARSING ITSELF
while test $# -gt 0
do
	_key="$1"
	case "$_key" in
		-l|--headerLine|--headerLine=*)
			_val="${_key##--headerLine=}"
			if test "$_val" = "$_key"
			then
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_val="$2"
				shift
			fi
			_arg_headerline="$_val"
			;;
		-h|--help)
			print_help
			exit 0
			;;
		*)
			_positionals+=("$1")
			;;
	esac
	shift
done

_positional_names=('_arg_fileuri' '_arg_tablename' '_arg_delimiter' )
test ${#_positionals[@]} -lt 2 && _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require between 2 and 3, but got only ${#_positionals[@]}." 1
test ${#_positionals[@]} -gt 3 && _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect between 2 and 3, but got ${#_positionals[@]} (the last one was: '${_positionals[*]: -1}')." 1
for (( ii = 0; ii < ${#_positionals[@]}; ii++))
do
	eval "${_positional_names[ii]}=\${_positionals[ii]}" || die "Error during argument parsing, possibly an Argbash bug." 1
done

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash
# needed because of

#######################################
# Cleanup line terminators
# Globals:
#   none
# Arguments:
#   CSV _arg_fileuripath
# Returns:
#   cleaned _arg_fileuri content
#######################################
# TODO(resc28): take care for CRLF, CR, LF, etc
function lineTerminatorCleanup () {
  tr -s '\r' '\n' < $1 
}


#######################################
# Generate DML statement from DSV file.
# Globals:
#   $TMP
#   $_arg_delimiter
#   $_arg_tablename
#   $_arg_headerline
#   $_arg_pkcolumn
# Arguments:
#   $TMP
#   $_arg_delimiter
#   $_arg_tablename
#   $_arg_headerline
#   $_arg_pkcolumn
# Returns:
#   DML to stdout
#######################################
function generateDML () {
  HEADERS=`sed "${4}q;d" $1 | tr -d '\n'`
  IFS=$2 read -a array <<< "$HEADERS"
  LAST_COL=${array[$[${#array[@]}-1]]}
  
  INSERT=`echo 'INSERT INTO '$3' (' ; for element in "${array[@]}"
  do
    if [ "$element" != "$LAST_COL" ]; then
        echo " ${element// /_},"
    else
        echo " ${element// /_} )"
    fi
  done; echo ' VALUES '`
  
  
  sed "${4}d" $1 | while read line ; do
    IFS=$2 read -a array <<< "$line"
    for ((i=0; i < ${#array[@]}; i++))
    do
      if [[ -z "${array[$i]}" ]]; then
        array[$i]="NULL"
      else
        array[$i]="'${array[$i]}'"
      fi
    done
    
    echo $INSERT '(' $(IFS=,; echo "${array[*]}") ');' >> $DML
  done
}


FILE=`mktemp`
TMP=`mktemp`
DML=`mktemp`

curl -s $_arg_fileuri > "${FILE}"
lineTerminatorCleanup $FILE > $TMP
generateDML $TMP $_arg_delimiter $_arg_tablename $_arg_headerline
cat $DML

# cleanup
rm $FILE
rm $TMP
rm $DML

#  <-- needed because of Argbash# ] <-- needed because of Argbash